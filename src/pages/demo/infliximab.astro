---
import BaseLayout from "../../layouts/BaseLayout.astro"
import Header from "../../components/blocks/Header.astro"
---
<BaseLayout title="Timeline Visualization">
    <script src="https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js"></script>
    <style>
        #chart {
            width: 100%;
            height: 600px;
        }
    </style>
    <Header title="INFLIXIMAB" branded="true" />
    <div id="chart"></div>
</BaseLayout>

<script is:inline type="module">
    const files = {
        firstApproval: '/timeline/timeline_infliximab_approval.json',
        publicationsCausal: '/timeline/timeline_infliximab_publications_causal.json',
        publicationsSemantic: '/timeline/timeline_infliximab_publications_semantic.json',
        grantsCausal: '/timeline/timeline_infliximab_grants_causal.json',
        grantsSemantic: '/timeline/timeline_infliximab_grants_semantic.json',
        patentsCausal: '/timeline/timeline_infliximab_patents_causal.json',
        patentsSemantic: '/timeline/timeline_infliximab_patents_semantic.json',
        clinicalTrials: '/timeline/timeline_infliximab_clinicaltrials.json'
    };

    // Utility function to load a JSON file
    function loadJSON(file) {
        return fetch(file).then(response => response.json());
    }

    // Convert a date string in "YYYYMMDD" format to an ISO string "YYYY-MM-DD"
    function toISODate(dateStr) {
        if (dateStr && dateStr.length === 8) {
            return dateStr.slice(0,4) + '-' + dateStr.slice(4,6) + '-' + dateStr.slice(6,8);
        }
        return dateStr;
    }

    // Extract dates from JSON, converting them to ISO format.
    // Assumes each JSON has a "results" array.
    function extractDates(json) {
        if (!json || !json.results) return [];
        return json.results.map(item => {
            let d;
            if (typeof item === 'object' && item !== null) {
                // Extract the first property value from the object.
                d = Object.values(item)[0];
            } else {
                d = item;
            }
            return toISODate(d);
      });
    }

    // Utility: Given an ISO date string ("YYYY-MM-DD"), return the month part ("YYYY-MM")
    function getYear(dateStr) {
        return dateStr.slice(0, 4);
    }

    // Load all JSON files concurrently.
    Promise.all(Object.values(files).map(loadJSON))
        .then(dataArray => {
            // Map loaded data back to their corresponding keys.
            const data = {};
            let idx = 0;
            for (const key in files) {
                data[key] = dataArray[idx++];
            }

            // Process the firstApproval file.
            let firstApprovalYear = null;
            if (data.firstApproval && data.firstApproval.results && data.firstApproval.results.length) {
                firstApprovalYear = Number(Object.values(data.firstApproval.results[0])[0]);
            }

            // Define each series (line) for the chart.
            const seriesDefinitions = [
                { name: 'Publications (Causal)', key: 'publicationsCausal' },
                { name: 'Publications (Semantic)', key: 'publicationsSemantic' },
                { name: 'Grants (Causal)', key: 'grantsCausal' },
                { name: 'Grants (Semantic)', key: 'grantsSemantic' },
                { name: 'Patents (Causal)', key: 'patentsCausal' },
                { name: 'Patents (Semantic)', key: 'patentsSemantic' },
                { name: 'Clinical Trials', key: 'clinicalTrials' }
            ];

            // For each series, extract date events (in ISO format), convert them to year ("YYYY"), and count occurrences per year.
            const seriesDataMap = {};
            // Also collect a set of all unique years.
            const allYearsSet = new Set();
            seriesDefinitions.forEach(def => {
                const dates = extractDates(data[def.key]);
                // Count events per month.
                const countByYear = {};
                dates.forEach(date => {
                    if (!date) return;
                    const year = getYear(date);
                    countByYear[year] = (countByYear[year] || 0) + 1;
                    allYearsSet.add(year);
                });
                seriesDataMap[def.key] = countByYear;
            });

            // Create a sorted array of all unique years.
            const allYears = Array.from(allYearsSet).sort();

            // For each series, create an array of data points [timestamp, count] for every year in allYears.
            const echartsSeries = seriesDefinitions.map(def => {
                const countByYear = seriesDataMap[def.key];
                const dataPoints = allYears.map(year => {
                    const timestamp = new Date(year).getTime();
                    return [timestamp, countByYear[year]];
                });
                return {
                    name: def.name,
                    type: 'line',
                    data: dataPoints,
                    smooth: true
                };
            });

            // Initialize the chart.
            const chartDom = document.getElementById('chart');
            const myChart = echarts.init(chartDom);

            // Base option for the chart.
            const option = {
                tooltip: {
                    trigger: 'axis',
                    formatter: function (params) {
                        const date = new Date(params[0].data[0]);
                        let tooltip = date.getFullYear() + '<br/>';
                        params.forEach(item => {
                            tooltip += item.marker + item.seriesName + ': ' + (item.data[1] || 0) + '<br/>';
                        });
                        return tooltip;
                    }
                },
                legend: {
                    data: seriesDefinitions.map(def => def.name)
                },
                xAxis: {
                    type: 'time',
                    name: 'Year'
                },
                yAxis: {
                    type: 'value',
                    name: 'Count'
                },
                dataZoom: [
                    { type: 'slider', start: 0, end: 50 },
                    { type: 'inside' }
                ],
                series: echartsSeries
            };

            // If firstApprovalYear exists, add a highlighted markArea covering that entire year.
            if (firstApprovalYear) {
                const startTimestamp = new Date(firstApprovalYear, 0, 1).getTime();
                const endTimestamp = new Date(firstApprovalYear + 1, 0, 1).getTime();
                // Attach markArea to the first series
                echartsSeries[0].markArea = {
                    silent: true,
                    data: [
                        [
                            {
                                name: 'Approved ' + firstApprovalYear,
                                xAxis: startTimestamp,
                                itemStyle: { color: 'rgba(255, 173, 177, 0.4)' }
                            },
                            { xAxis: endTimestamp }
                        ]
                    ]
                };
            }

            // Render the chart.
            myChart.setOption(option);
        })
        .catch(error => {
            console.error('Error loading JSON data:', error);
        });
</script>
