---
import BaseLayout from "../../layouts/BaseLayout.astro"
import Header from "../../components/blocks/Header.astro"
---
<BaseLayout title="Timeline Visualization">
    <script src="https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js"></script>
    <style>
        #chart {
            width: 100%;
            height: 600px;
        }
    </style>
    <Header title="IL12A" branded="true" />
    <div id="chart"></div>
</BaseLayout>

<script is:inline type="module">
    const files = {
        // The rest should now be in the new format (year, relationshipCount).
        publicationsCausal: '/timeline/timeline_il12a_publications_causal.json',
        publicationsSemantic: '/timeline/timeline_il12a_publications_semantic.json',
        grantsCausal: '/timeline/timeline_il12a_grants_causal.json',
        grantsSemantic: '/timeline/timeline_il12a_grants_semantic.json',
        patentsCausal: '/timeline/timeline_il12a_patents_causal.json',
        patentsSemantic: '/timeline/timeline_il12a_patents_semantic.json',
        clinicalTrials: '/timeline/timeline_il12a_clinicaltrials.json'
    };

    // Utility function to load a JSON file
    function loadJSON(file) {
        return fetch(file).then(response => response.json());
    }

    /**
     * Extract (year, count) data from a JSON object in the new format:
     * {
     *   "results": [
     *     { "year": "1988", "relationshipCount": 2 },
     *     { "year": "1990", "relationshipCount": 6 },
     *     ...
     *   ]
     * }
     */
    function extractYearData(json) {
        if (!json || !json.results) return [];
        return json.results.map(item => {
            return {
                year: item.year,
                count: Number(item.relationshipCount) || 0
            };
        });
    }

    // Load all JSON files concurrently.
    Promise.all(Object.values(files).map(loadJSON))
        .then(dataArray => {
            // Map loaded data back to their corresponding keys.
            const data = {};
            let idx = 0;
            for (const key in files) {
                data[key] = dataArray[idx++];
            }

            // Process the firstApproval file (still in the old format?)
            // If your "firstApproval" file also changed to a year/count format,
            // you can adapt it similarly to extract a .year instead.
            let firstApprovalYear = null;
            if (data.firstApproval && data.firstApproval.results && data.firstApproval.results.length) {
                // Example: if the old "first_approval" was stored as a single numeric year
                // or a single date string, parse it here.
                firstApprovalYear = Number(Object.values(data.firstApproval.results[0])[0]);
            }

            // Define each series (line) for the chart.
            // These correspond to the new year/count JSON structure.
            const seriesDefinitions = [
                { name: 'Publications (Causal)', key: 'publicationsCausal' },
                { name: 'Publications (Semantic)', key: 'publicationsSemantic' },
                { name: 'Grants (Causal)', key: 'grantsCausal' },
                { name: 'Grants (Semantic)', key: 'grantsSemantic' },
                { name: 'Patents (Causal)', key: 'patentsCausal' },
                { name: 'Patents (Semantic)', key: 'patentsSemantic' },
                { name: 'Clinical Trials', key: 'clinicalTrials' }
            ];

            // We'll store year -> count data in a map for each series
            // and collect a set of all years across all series.
            const seriesDataMap = {};
            const allYearsSet = new Set();

            seriesDefinitions.forEach(def => {
                // Extract the pre-aggregated data {year, count} from the new JSON format.
                const items = extractYearData(data[def.key]);
                const countByYear = {};

                items.forEach(({ year, count }) => {
                    // If your query ensures unique "year" rows, you can directly assign.
                    // If there's a possibility of duplicates, you might sum them:
                    // countByYear[year] = (countByYear[year] || 0) + count;
                    countByYear[year] = count;
                    allYearsSet.add(year);
                });

                seriesDataMap[def.key] = countByYear;
            });

            // Create a sorted array of all unique years (strings).
            const allYears = Array.from(allYearsSet).sort();

            // Convert years into ECharts time-axis data (timestamps).
            // For each series, create an array of [timestamp, count].
            const echartsSeries = seriesDefinitions.map(def => {
                const countByYear = seriesDataMap[def.key];
                const dataPoints = allYears.map(year => {
                    // Convert "YYYY" to a Date, use January 1st of that year.
                    const timestamp = new Date(parseInt(year, 10), 0, 1).getTime();
                    return [timestamp, countByYear[year]];
                });

                return {
                    name: def.name,
                    type: 'line',
                    data: dataPoints,
                    smooth: true
                };
            });

            // Initialize the chart.
            const chartDom = document.getElementById('chart');
            const myChart = echarts.init(chartDom);

            const option = {
                tooltip: {
                    trigger: 'axis',
                    formatter: function (params) {
                        // All lines share the same x-axis value in "params"
                        const date = new Date(params[0].data[0]);
                        let tooltip = date.getFullYear() + '<br/>';
                        params.forEach(item => {
                            tooltip += item.marker + item.seriesName + ': ' + (item.data[1] || 0) + '<br/>';
                        });
                        return tooltip;
                    }
                },
                legend: {
                    data: seriesDefinitions.map(def => def.name)
                },
                xAxis: {
                    type: 'time',
                    name: 'Year'
                },
                yAxis: {
                    type: 'value',
                    name: 'Count'
                },
                dataZoom: [
                    { type: 'slider', start: 0, end: 50 },
                    { type: 'inside' }
                ],
                series: echartsSeries
            };

            // Highlight the firstApproval year (if available).
            if (firstApprovalYear) {
                // Mark area for the first series only as an example.
                const startTimestamp = new Date(firstApprovalYear, 0, 1).getTime();
                const endTimestamp = new Date(firstApprovalYear + 1, 0, 1).getTime();
                echartsSeries[0].markArea = {
                    silent: true,
                    data: [
                        [
                            {
                                name: 'Approved ' + firstApprovalYear,
                                xAxis: startTimestamp,
                                itemStyle: { color: 'rgba(255, 173, 177, 0.4)' }
                            },
                            { xAxis: endTimestamp }
                        ]
                    ]
                };
            }

            myChart.setOption(option);
        })
        .catch(error => {
            console.error('Error loading JSON data:', error);
        });
</script>
