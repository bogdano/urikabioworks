---
import ThemeToggle from "./ThemeToggle.astro";
const { menu_items, logo } = Astro.props
function normalizeUrl(url) {
    return url.replace(/\/$/, "");
}
const currentPath = normalizeUrl(Astro.url.pathname).split("/")[1] || "";
---

<nav id="navigation" class="fixed top-0 flex items-center px-4 py-2.5 z-50 bg-white/80 dark:bg-zinc-950/80 w-full transition-shadow lg:backdrop-blur border-b border-urika-gray-100 dark:border-zinc-800">
    <button class="menu-btn mobile-only p-4 pl-2 rounded-full outline-none" id="menu-button" aria-label="Menu">
        <span class="menu-btn__burger"></span>
    </button>

    <a href="/" id="upper-logo" class="flex items-center mx-auto opacity-0 transition-opacity duration-500 pr-12 lg:p-0 lg:ml-4 lg:mr-4">
        <img src={`https://admin.urikabioworks.com/assets/${logo}`} alt="URIKA Logo" class="h-8" />
        <span class="text-urika-gray-400 dark:text-urika-gray-300 font-urika text-xl font-semibold ml-2 mr-2">URIKA</span>
    </a>

    <div id="nav-wrapper" class="bg-white dark:bg-zinc-950/20 lg:bg-white/0 dark:lg:bg-white/0 nav-wrapper flex backdrop-blur-lg lg:backdrop-blur-none lg:dark:border-none dark:border-r dark:border-zinc-800" transition:name="menu">
        <div id="main-navigation" class="grow">
            <ul class="nav-buttons font-extrabold flex gap-2 text-urika-blue-900 dark:text-urika-gray-300 text-md">
                {menu_items.map((item) => (
                    <li class="hover:bg-urika-orange-400 dark:hover:bg-urika-blue-600 hover:text-white rounded-full transition">
                        { item.permalink === currentPath ? (
                            <a class="block w-full px-4 py-2 bg-urika-blue-900 dark:bg-urika-orange-700 rounded-full text-white uppercase" href={"/" + item.permalink} data-astro-prefetch>{item.title}</a>
                        ) : (
                            <a class="block px-4 py-2 uppercase" href={"/" + item.permalink} data-astro-prefetch>{item.title}</a>
                        )}
                    </li>
                ))}
            </ul>
        </div>
        <div id="secondary-navigation" class="flex lg:justify-end justify-between w-full lg:w-36 lg:pr-4">
            <div class="flex items-end lg:items-center pl-2 lg:pl-0"><ThemeToggle /></div>
            <img src={`https://admin.urikabioworks.com/assets/${logo}`} alt="URIKA Logo" class="mobile-only h-12" />
        </div>
    </div>

    <div class="overlay mobile-only" id="overlay"></div>
</nav>

<script>
    document.addEventListener('scroll', () => {
        const navigation = document.getElementById('navigation');
        const upperLogo = document.getElementById('upper-logo');
        if (window.scrollY > 0) {
            navigation.classList.add('shadow');
            upperLogo.classList.add('opacity-100');
        } else {
            navigation.classList.remove('shadow');
            upperLogo.classList.remove('opacity-100');
        }
    });

    document.addEventListener('astro:page-load', () => {
        mountMenuListeners();
    });

    const mountMenuListeners = () => {
        const menuButton = document.getElementById('menu-button');
        const navWrapper = document.getElementById('nav-wrapper');
        const overlay = document.getElementById('overlay');
        let menuOpen = false;

        // Get scrollbar width
        const getScrollbarWidth = () => {
            const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
            return scrollbarWidth;
        };

        const openMenu = () => {
            menuOpen = true;
            const { documentElement: html } = document;
            const scrollbarWidth = getScrollbarWidth();
            if (scrollbarWidth) {
                html.style.setProperty('--scrollbar-width', `${scrollbarWidth}px`);
            }
            html.classList.add('menu-is-open');
            menuButton.classList.add('open');
            navWrapper.classList.add('open');
            overlay.style.setProperty('display', 'block');
            setTimeout(() => {
                overlay.classList.add('open');
            }, 10);
        };
        const closeMenu = () => {
            menuOpen = false;
            const { documentElement: html } = document;
            html.classList.remove('menu-is-open');
            menuButton.classList.remove('open');
            navWrapper.classList.remove('open');
            overlay.classList.remove('open');
            // set display: none with 300ms delay
            setTimeout(() => {
                overlay.style.setProperty('display', 'none');
            }, 150);
        };

        // Toggle menu with button
        menuButton.addEventListener('click', () => {
            menuOpen ? closeMenu() : openMenu();
        });

        // Close menu when clicking outside
        overlay.addEventListener('click', () => {
            closeMenu();
        });
    }
</script>
